#!/usr/bin/make -f

# Squeeze support
ifeq (,$(DEB_HOST_MULTIARCH))
DEB_HOST_MULTIARCH:=$(DEB_HOST_GNU_TYPE)
DEB_BUILD_MULTIARCH:=$(DEB_BUILD_GNU_TYPE)
endif

# Cross-build settings
ifneq ($(DEB_HOST_MULTIARCH),$(DEB_BUILD_MULTIARCH))
CC=$(DEB_HOST_MULTIARCH)-gcc
CXX=$(DEB_HOST_MULTIARCH)-g++
CROSS_CPPFLAGS=
CROSS_INCDIR=
CROSS_LDFLAGS=
CROSS_LIBDIR=
else
CC=gcc
CXX=g++
CROSS_CPPFLAGS=
CROSS_INCDIR=
CROSS_LDFLAGS=
CROSS_LIBDIR=
endif

ifeq (arm-linux-gnueabi,$(DEB_HOST_MULTIARCH))
ifeq (,$(filter noopt,$(DEB_BUILD_OPTIONS)))
CROSS_CPPFLAGS+=-fomit-frame-pointer -finline-functions -falign-functions=2 -falign-loops=2 -falign-jumps=2 -march=armv4t -mtune=arm920t -msoft-float
endif
endif

ifeq (arm-linux-gnueabihf,$(DEB_HOST_MULTIARCH))
# <http://processors.wiki.ti.com/index.php/Cortex-A8>
CROSS_CPPFLAGS+=-march=armv7-a -mtune=cortex-a8 -mfpu=neon -ftree-vectorize -mfloat-abi=hard
# Avoid "Error: selected processor does not support Thumb mode `swp r6,r4,[r0]'"
# <http://pandaboard.org/pbirclogs//index.php?date=2011-07-10>
# at 17:05:14 and 17:30:26
CROSS_CPPFLAGS+=-marm
endif

QMAKE_CFLAGS=-pipe $(shell CC=$(CC) dpkg-buildflags --get CFLAGS) $(CROSS_CPPFLAGS)
QMAKE_LDFLAGS=$(shell CC=$(CC) dpkg-buildflags --get LDFLAGS) $(CROSS_LDFLAGS)

CONFIGURE := $(CURDIR)/configure
LANGUAGES := $(shell ls i18n/ | xargs echo | sed 's/ /,/g')

TOOLCHAIN := linux-native-g++
QTMOKO_DEVICES ?= gta04 neo pc
DEVICES := $(QTMOKO_DEVICES)
QMAKE_CONF = devices/$1/mkspecs/qws/$(TOOLCHAIN)/qmake.conf

QT_VERSION := $(shell grep '^\# *define *QT_VERSION_STR' "qtopiacore/qt/src/corelib/global/qglobal.h" | awk '{print $$3}')
export QUILT_PATCHES=debian/patches

# Force our pkg-config wrapper
export PKG_CONFIG=$(CURDIR)/pkg-config-cross
# PKG_CONFIG_PATH to use for target system; See devices/<device>/environment
export QTMOKO_PKG_CONFIG_PATH=/usr/$(DEB_HOST_MULTIARCH)/lib/pkgconfig

# The configure step defaults to '-build-qt'. If QTMOKO_SYSTEM_QT isn't
# empty, we use 'system-qt' instead. 
ifneq (,$(QTMOKO_SYSTEM_QT))
SYSTEM_QT_BUILD_DEPS := , libqt4-dev, libqt4-sql-sqlite
SYSTEM_QT_OPTION := -system-qt
else
# with '-build-qt' we need to force LD_LIBRARY_PATH at install time
SDK_HOST_LD_LIBRARY_PATH = LD_LIBRARY_PATH=$$(readlink -f ../build-$1)/sdk/qtopiacore/host/lib
endif

%:
	dh $@

clean: debian/control
.PHONY: debian/control
debian/control:
	sed 's/@SYSTEM_QT@/'"$(SYSTEM_QT_BUILD_DEPS)"'/' debian/control-src >debian/control
	for device in $(DEVICES); do \
		cat debian/control-$$device >> debian/control; \
	done

override_dh_auto_configure:
	# Qt-4.8 specific patches
#	if [ "$$(echo "4.8\n$(QT_VERSION)" | sort -V | head -1)" = "4.8" ]; then \
#		if [ "$$(basename "$$(readlink -f debian/patches/series)")" = "series-main" ]; then \
#			rm -fr .pc; \
#		fi; \
#		ln -fs series-qt48 debian/patches/series; \
#		quilt push -a; \
#	fi
	# Patch the qmake.conf file with proper toolchain configuration
	for device in $(DEVICES); do \
		sed -i.orig \
			-e 's:^\(QMAKE_CC[ \t]*=\).*$$:\1 '"$(CC):" \
			-e 's:^\(QMAKE_CXX[ \t]*=\).*$$:\1 '"$(CXX):" \
			-e 's:^\(QMAKE_LINK[ \t]*=\).*$$:\1 '"$(CXX):" \
			-e 's:^\(QMAKE_LINK_SHLIB[ \t]*=\).*$$:\1 '"$(CXX):" \
			-e 's:^\(QMAKE_CFLAGS[ \t]*=\).*$$:\1 '"$(QMAKE_CFLAGS):" \
			-e 's:^\(QMAKE_CFLAGS_RELEASE[ \t]*=\).*$$:\1 :' \
			-e 's:^\(QMAKE_CFLAGS_DEBUG[ \t]*=\).*$$:\1 :' \
			-e 's:^\(QMAKE_INCDIR[ \t]*=\).*$$:\1 '"$(CROSS_INCDIR):" \
			-e 's:^\(QMAKE_LIBDIR[ \t]*=\).*$$:\1 '"$(CROSS_LIBDIR):" \
			-e 's:^\(QMAKE_LFLAGS[ \t]*=\).*$$:\1 '"$(QMAKE_LDFLAGS):" \
			-e 's:^\(QMAKE_LIBS[ \t]*=\).*$$:\1 '"-ldl:" \
			$(call QMAKE_CONF,$$device); \
	done

	# Qt Extended configuration step
	for device in $(DEVICES); do \
		mkdir -p ../build-$$device; \
		cd ../build-$$device && "$(CONFIGURE)" -device $$device $(SYSTEM_QT_OPTION) -xplatform $(TOOLCHAIN) -remove-module pkgmanagement -languages $(LANGUAGES) -extra-qt-embedded-config="-system-sqlite -system-libtiff -system-libmng" -extra-qt-config="-system-sqlite -no-gif -nomake tools -no-declarative"; \
		cd $(CURDIR); \
	done

override_dh_auto_build:
	for device in $(DEVICES); do \
		$(MAKE) -C ../build-$$device; \
	done

override_dh_auto_clean:
	# If needed, revert QT_VERSION specific patches
	if [ "$$(basename "$$(readlink -f debian/patches/series)")" != "series-main" ]; then \
		if quilt app; then \
			quilt pop -a; \
		fi; \
		ln -fs series-main debian/patches/series; \
	fi

	for device in $(DEVICES); do \
		[ ! -f $(call QMAKE_CONF,$$device).orig ] || mv $(call QMAKE_CONF,$$device).orig $(call QMAKE_CONF,$$device); \
		rm -fr ../build-$$device; \
	done
	rm -f sdk/LICENSE.QtopiaGPL

override_dh_auto_install:
	for device in $(DEVICES); do \
		$(call SDK_HOST_LD_LIBRARY_PATH,$$device) $(MAKE) -C ../build-$$device install; \
		mkdir -p debian/tmp-$$device/opt/qtmoko; \
		cp -r ../build-$$device/image/* debian/tmp-$$device/opt/qtmoko; \
	done

	# remove patented stuff - can be installed via package later
	for device in $(DEVICES); do \
		rm -f debian/tmp-$$device/opt/qtmoko/plugins/codecs/libmadplugin.so; \
		rm -f debian/tmp-$$device/opt/qtmoko/lib/libmad.so.0; \
	done

	# symlink to ttfont installed together with X
	for device in $(DEVICES); do \
		rm -rf debian/tmp-$$device/opt/qtmoko/lib/fonts; \
	done

	# Install missing dependency for qt_plugins/script/libqtscriptdbus.so
	for device in $(DEVICES); do \
		install -m"a+r,u+w" ../build-$$device/qtopiacore/target/lib/libQtScript.so.$(QT_VERSION) debian/tmp-$$device/opt/qtmoko/lib; \
	done
	
	# Install libQtDeclarative so that dh_shlibdeps does not complain
	for device in $(DEVICES); do \
		install -m"a+r,u+w" ../build-$$device/qtopiacore/target/lib/libQtDeclarative* debian/tmp-$$device/opt/qtmoko/lib/; \
	done

override_dh_makeshlibs:
	dh_makeshlibs -n

override_dh_shlibdeps:
	#dh_shlibdeps -l$(CURDIR)/debian/qtmoko-$(QTMOKO_DEVICE)/opt/qtmoko/lib

VERSION = $(shell dpkg-parsechangelog | grep '^Version:' | awk '{print $$2}' | sed 's/\(.*\)-[^-]*/\1/')
get-orig-source: clean
	! quilt app || quilt pop -a
	tar caf $(CURDIR)/../qtmoko_$(VERSION).orig.tar.gz --exclude .pc --exclude .git --exclude $$(basename $(CURDIR))/debian -C $(CURDIR)/.. $$(basename $(CURDIR))
